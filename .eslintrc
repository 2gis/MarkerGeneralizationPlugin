{
    // http://eslint.org/docs/rules/
    "env": {
        "es6": true,
        "browser": true,      // browser global variables.
        "node": false,        // Node.js global variables and Node.js-specific rules.
        "amd": false,         // defines require() and define() as global variables as per the amd spec.
        "mocha": false,       // adds all of the Mocha testing global variables.
        "jasmine": false,     // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
        "phantomjs": false,   // phantomjs global variables.
        "jquery": false,      // jquery global variables.
        "prototypejs": false, // prototypejs global variables.
        "shelljs": false      // shelljs global variables.
    },

    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module"
    },

    "globals": {
        "L": true,
    },

    "rules": {
        ////////// Possible Errors //////////

        "comma-dangle": [2, "never"], // disallow trailing commas in object literals
        "no-cond-assign": [2, "except-parens"], // disallow assignment in conditional expressions
        "no-console": 2,              // disallow use of console (off by default in the node environment)
        "no-constant-condition": 2,   // disallow use of constant expressions in conditions
        "no-control-regex": 1,        // disallow control characters in regular expressions
        "no-debugger": 2,             // disallow use of debugger
        "no-dupe-args": 2,
        "no-dupe-keys": 2,            // disallow duplicate keys when creating object literals
        "no-duplicate-case": 2,
        "no-empty": 2,                // disallow empty statements
        "no-empty-character-class": 2,// disallow the use of empty character classes in regular expressions
        "no-ex-assign": 2,            // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 2,   // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": [2, "functions"],         // disallow unnecessary parentheses (off by default)
        "no-extra-semi": 2,           // disallow unnecessary semicolons
        "no-func-assign": 1,          // disallow overwriting functions written as function declarations
        "no-inner-declarations": [2, "functions"],   // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 2,       // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": 2,       // disallow negation of the left operand of an in expression
        "no-obj-calls": 2,            // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 2,         // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 2,        // disallow sparse arrays
        "no-unreachable": 2,          // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": 2,               // disallow comparisons with the value NaN
        "valid-jsdoc": 0,//1,             // Ensure JSDoc comments are valid (off by default)
        "valid-typeof": 2,            // Ensure that the results of typeof are compared against a valid string


        ////////// Best Practices //////////

        "block-scoped-var": 1,      // treat var statements as if they were block scoped (off by default)
        "complexity": 0,//[1, 9],       // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "consistent-return": 2,     // require return statements to either always or never specify values
        "curly": 1,                     // specify curly brace conventions for all control statements
        "default-case": 1,          // require default case in switch statements (off by default)
        "dot-notation": 0,          // encourages use of dot notation whenever possible
        "dot-location": [2, "property"],
        "eqeqeq": 0,                // require the use of === and !==
        "guard-for-in": 2,          // make sure for-in loops have an if statement (off by default)
        "no-alert": 2,              // disallow the use of alert, confirm, and prompt
        "no-caller": 2,             // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 2,          // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-else-return": 2,        // disallow else after a return in an if (off by default)
        "no-empty-label": 0,        // disallow use of labels for anything other then loops and switches
        "no-eq-null": 2,            // disallow comparisons to null without a type-checking operator (off by default)
        "no-eval": 2,               // disallow use of eval()
        "no-extend-native": 2,      // disallow adding to native types
        "no-extra-bind": 2,         // disallow unnecessary function binding
        "no-fallthrough": 2,        // disallow fallthrough of case statements

        "no-floating-decimal": 2,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-implied-eval": 2,       // disallow use of eval()-like methods
        "no-iterator": 2,           // disallow usage of __iterator__ property
        "no-labels": 2,             // disallow use of labeled statements
        "no-lone-blocks": 2,        // disallow unnecessary nested blocks
        "no-loop-func": 2,          // disallow creation of functions within loops
        "no-multi-spaces": 2,       // disallow use of multiple spaces
        "no-multi-str": 1,          // disallow use of multiline strings
        "no-native-reassign": 2,    // disallow reassignments of native objects
        "no-new": 2,                // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 2,           // disallow use of new operator for Function object
        "no-new-wrappers": 2,       // disallows creating new instances of String, Number, and Boolean
        "no-octal": 1,              // disallow use of octal literals
        "no-octal-escape": 2,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-param-reassign": 2,     // Disallow Reassignment of Function Parameters
        "no-process-env": 2,        // disallow use of process.env
        "no-proto": 2,              // disallow usage of __proto__ property
        "no-redeclare": 2,          // disallow declaring the same variable more then once
        "no-return-assign": [2, "always"],      // disallow use of assignment in return statement
        "no-script-url": 2,         // disallow use of javascript: urls.
        "no-self-compare": 1,       // disallow comparisons where both sides are exactly the same (off by default)
        "no-sequences": 2,          // disallow use of comma operator
        "no-throw-literal": 2,
        "no-unused-expressions": 2, // disallow usage of expressions in statement position
        "no-void": 2,               // disallow use of void operator (off by default)
        "no-warning-comments": 0,   // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
        "no-with": 2,               // disallow use of the with statement
        "radix": 2,                 // require use of the second argument for parseInt() (off by default)
        "vars-on-top": 0,           // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": 0,//Отключено: не то, что мы хотим 2,             // require immediate function invocation to be wrapped in parentheses (off by default)
        "yoda": [2, "never"],       // require or disallow Yoda conditions


        ////////// Strict Mode //////////

        "strict": 0,

        ////////// Variables //////////

        "no-catch-shadow": 2,             // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-delete-var": 2,               // disallow deletion of variables
        "no-label-var": 2,                // disallow labels that share a name with a variable
        "no-shadow": 0,//1,                   // disallow declaration of variables already declared in the outer scope
        "no-shadow-restricted-names": 2,  // disallow shadowing of names such as arguments
        "no-undef": 2,                    // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef-init": 2,               // disallow use of undefined when initializing variables
        "no-undefined": 0,//2,                // disallow use of undefined variable (off by default)
        "no-unused-vars": [2, {"vars": "all"}],              // disallow declaration of variables that are not used in the code
        "no-use-before-define": [2, "nofunc"],        // disallow use of variables before they are defined


        ////////// Stylistic Issues //////////

        "brace-style": [2, "1tbs"],     // enforce one true brace style (off by default)
        "camelcase": 0,//[2, {"properties": "never"}],                 // require camel case names
        "comma-spacing": [2, {"before": false, "after": true}],             // enforce spacing before and after comma
        "comma-style": [2, "last"],               // enforce one true comma style (off by default)
        "consistent-this": 0,           // enforces consistent naming when capturing the current execution context (off by default)
        "eol-last": 2,                  // enforce newline at the end of file, with no multiple empty lines
        "func-names": 0,// 1,              // require function expressions to have a name (off by default)
        "func-style": 0,                // enforces use of function declarations or expressions (off by default)
        "indent": [2, 4, {"SwitchCase": 1}],
        "key-spacing": [2, {"beforeColon": false, "afterColon": true}],               // enforces spacing between keys and values in object literal properties
        "lines-around-comment": 0,
        "linebreak-style": [2, "unix"],
        "max-nested-callbacks": [2, 4], // specify the maximum depth callbacks can be nested (off by default)
        "new-cap": 2,//2,                   // require a capital letter for constructors
        "new-parens": 2,                // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": 0,
        "no-array-constructor": 2,      // disallow use of the Array constructor
        "no-continue": 0,
        "no-inline-comments": 0,        // disallow comments inline after code (off by default)
        "no-lonely-if": 0,//Отключено: скорее мешает. 2,              // disallow if as the only statement in an else block (off by default)
        "no-mixed-spaces-and-tabs": 2,  // disallow mixed spaces and tabs for indentation
        "no-multiple-empty-lines": [2, {"max": 2}],   // disallow multiple empty lines (off by default)
        "no-nested-ternary": 2,         // disallow nested ternary expressions (off by default)
        "no-new-object": 2,             // disallow use of the Object constructor
        "no-spaced-func": 2,            // disallow space between function identifier and application
        "no-ternary": 0,                // disallow the use of ternary operators (off by default)
        "no-trailing-spaces": 2,        // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 0,      // disallow dangling underscores in identifiers
        "no-unneeded-ternary": 2,
        "object-curly-spacing": 0,
        "one-var": [2, { "uninitialized": "never", "initialized": "never" }],        // allow just one var statement per function (off by default)
        "operator-assignment": [2, "always"],       // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "operator-linebreak": [2, "after"],
        "padded-blocks": 0,//[2, "never"],             // enforce padding within blocks (off by default)
        "quote-props": 0,//[1, "as-needed"],               // require quotes around object literal property names (off by default)
        "quotes": [2, "single", "avoid-escape"],                    // specify whether double or single quotes should be used
        "semi-spacing": [2, {"before": false, "after": true}],
        "semi": [2, "always"],                      // require or disallow use of semicolons instead of ASI
        "sort-vars": 0,                 // sort variables within the same declaration block (off by default)
        "space-before-function-paren": [2, "never"], // require a space after function names (off by default)
        "space-before-blocks": [2, "always"],       // require or disallow space before blocks (off by default)
        "space-in-parens": 0,           // require or disallow spaces inside parentheses (off by default) TODO: разобрать дополнительно
        "space-infix-ops": 2,           // require spaces around operators
        "space-unary-ops": 0, //Отключено: неадекват. [2, { "words": true, "nonwords": false }],           // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "spaced-comment": 2,//[2, "always"],// require or disallow a space immediately following the // in a line comment (off by default)
        "wrap-regex": 0,                // require regex literals to be wrapped in parentheses (off by default)
        "keyword-spacing": 2, // Enforce spacing before and after keywords


        ////////// Legacy //////////

        "max-depth": [2, 4],       // specify the maximum depth that blocks can be nested (off by default)
        "max-len": [2, 120],         // specify the maximum length of a line in your program (off by default)
        "max-params": 0,      // limits the number of parameters that can be used in the function declaration. (off by default)
        "max-statements": 0,//[2, 42],  // specify the maximum number of statement allowed in a function (off by default)
        "no-bitwise": 0,      // disallow use of bitwise operators (off by default)
        "no-plusplus": 0,      // disallow use of unary operators, ++ and -- (off by default)

        ////////// New Rules //////////

        "no-unexpected-multiline": 2,
        "callback-return": 0,
        "init-declarations": 0,
        "global-require": 2,

        "no-negated-condition": 0,
        "no-useless-call": 2,
        "no-useless-concat": 2,

        ////////// ES6 ////////////

        //"arrow-parens": [2, "always"],
        "arrow-spacing": [2, {"before": true, "after": true}],
        "constructor-super": 2,
        "generator-star-spacing": [2, {"before": true, "after": false}],
        "no-confusing-arrow": [2, {"allowParens": true}], // Disallow arrow functions where they could be confused with comparisons
        "no-class-assign": 2,
        "no-const-assign": 2,
        "no-dupe-class-members": 2,
        "no-this-before-super": 2,
        "prefer-arrow-callback": 0, // много правок
        "prefer-template": 0, // много правок
        "require-yield": 2,

        "arrow-body-style": [2, "as-needed"],
        "no-var": 0,
        "object-shorthand": [0, "always"], // много правок
    },

    "extends": "eslint:recommended"
}
